$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 T clk $end
  $var wire  1 Y exit $end
  $var wire 32 V inst [31:0] $end
  $var wire 32 W pc [31:0] $end
  $var wire  1 U rst $end
  $var wire 32 X upc [31:0] $end
  $scope module top $end
   $var wire  1 % CF $end
   $var wire 32 b DATA_WIDTH [31:0] $end
   $var wire  1 $ OF $end
   $var wire  1 # ZF $end
   $var wire  1 T clk $end
   $var wire  1 Y exit $end
   $var wire  3 ] func [2:0] $end
   $var wire 32 a imm [31:0] $end
   $var wire 32 V inst [31:0] $end
   $var wire  1 [ jump $end
   $var wire  7 \ op [6:0] $end
   $var wire 32 W pc [31:0] $end
   $var wire  5 ` rd [4:0] $end
   $var wire 32 ( result [31:0] $end
   $var wire  5 ^ rs1 [4:0] $end
   $var wire  5 _ rs2 [4:0] $end
   $var wire  1 U rst $end
   $var wire 32 & src1 [31:0] $end
   $var wire 32 ' src2 [31:0] $end
   $var wire 32 X upc [31:0] $end
   $var wire  1 Z wen $end
   $scope module mdecode $end
    $var wire  3 ] func [2:0] $end
    $var wire 32 a i [31:0] $end
    $var wire 32 a imm [31:0] $end
    $var wire 32 V inst [31:0] $end
    $var wire  7 \ op [6:0] $end
    $var wire  5 ` rd [4:0] $end
    $var wire  5 ^ rs1 [4:0] $end
    $var wire  5 _ rs2 [4:0] $end
   $upscope $end
   $scope module mexecute $end
    $var wire  1 % CF $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire  1 $ OF $end
    $var wire  1 # ZF $end
    $var wire 32 ) a [31:0] $end
    $var wire  4 c alu_op [3:0] $end
    $var wire 32 * b [31:0] $end
    $var wire  1 Y exit $end
    $var wire  3 ] func [2:0] $end
    $var wire 32 a imm [31:0] $end
    $var wire  1 [ jump $end
    $var wire  7 \ op [6:0] $end
    $var wire 32 W pc [31:0] $end
    $var wire 32 ( result [31:0] $end
    $var wire  1 d sign $end
    $var wire 32 & src1 [31:0] $end
    $var wire 32 ' src2 [31:0] $end
    $var wire  1 d sub $end
    $var wire 32 X upc [31:0] $end
    $var wire  1 Z wen $end
    $scope module myalu $end
     $var wire  2 e ADDER [1:0] $end
     $var wire  1 % CF $end
     $var wire  2 h CMP [1:0] $end
     $var wire  2 g LOGIC [1:0] $end
     $var wire  1 $ OF $end
     $var wire  2 f SHIFT [1:0] $end
     $var wire  1 # ZF $end
     $var wire 32 ) a [31:0] $end
     $var wire 32 ( adder_result [31:0] $end
     $var wire  4 c alu_crl [3:0] $end
     $var wire 32 * b [31:0] $end
     $var wire  1 % cmp $end
     $var wire 32 - cmp_result [31:0] $end
     $var wire 32 ) l [31:0] $end
     $var wire  2 j logic_crl [1:0] $end
     $var wire 32 , logic_result [31:0] $end
     $var wire  2 e op_crl [1:0] $end
     $var wire 32 * r [31:0] $end
     $var wire 32 ( result [31:0] $end
     $var wire  2 i shift_crl [1:0] $end
     $var wire 32 + shift_result [31:0] $end
     $var wire  1 d sign $end
     $var wire  1 d sub $end
     $scope module Adder $end
      $var wire 32 ) a [31:0] $end
      $var wire 32 * b [31:0] $end
      $var wire  1 d cin $end
      $var wire  1 % cout $end
      $var wire  1 $ overflow $end
      $var wire 32 ( result [31:0] $end
      $var wire  1 # zero $end
     $upscope $end
     $scope module Logic $end
      $var wire  2 e AND [1:0] $end
      $var wire  2 f OR [1:0] $end
      $var wire  2 g XOR [1:0] $end
      $var wire 32 ) a [31:0] $end
      $var wire 32 . and_result [31:0] $end
      $var wire 32 * b [31:0] $end
      $var wire  2 j logic_crl [1:0] $end
      $var wire 32 , logic_result [31:0] $end
      $var wire 32 / or_result [31:0] $end
      $var wire 32 0 xor_result [31:0] $end
     $upscope $end
     $scope module Shift $end
      $var wire  2 e SLL [1:0] $end
      $var wire  2 f SRA [1:0] $end
      $var wire  2 g SRL [1:0] $end
      $var wire 32 ) a [31:0] $end
      $var wire  2 i shift_crl [1:0] $end
      $var wire  5 1 shift_num [4:0] $end
      $var wire 32 + shift_result [31:0] $end
      $var wire 32 2 sll_result [31:0] $end
      $var wire 32 3 sra_result [31:0] $end
      $var wire 32 2 srl_result [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module mpc $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire  1 T clk $end
    $var wire  1 [ jump $end
    $var wire 32 W pc [31:0] $end
    $var wire  1 U rst $end
    $var wire 32 X upc [31:0] $end
   $upscope $end
   $scope module mreg $end
    $var wire 32 k ADDR_WIDTH [31:0] $end
    $var wire 32 b DATA_WIDTH [31:0] $end
    $var wire  1 T clk $end
    $var wire  5 ^ raddr1 [4:0] $end
    $var wire  5 _ raddr2 [4:0] $end
    $var wire 32 & rdata1 [31:0] $end
    $var wire 32 ' rdata2 [31:0] $end
    $var wire 32 4 rf[0] [31:0] $end
    $var wire 32 > rf[10] [31:0] $end
    $var wire 32 ? rf[11] [31:0] $end
    $var wire 32 @ rf[12] [31:0] $end
    $var wire 32 A rf[13] [31:0] $end
    $var wire 32 B rf[14] [31:0] $end
    $var wire 32 C rf[15] [31:0] $end
    $var wire 32 D rf[16] [31:0] $end
    $var wire 32 E rf[17] [31:0] $end
    $var wire 32 F rf[18] [31:0] $end
    $var wire 32 G rf[19] [31:0] $end
    $var wire 32 5 rf[1] [31:0] $end
    $var wire 32 H rf[20] [31:0] $end
    $var wire 32 I rf[21] [31:0] $end
    $var wire 32 J rf[22] [31:0] $end
    $var wire 32 K rf[23] [31:0] $end
    $var wire 32 L rf[24] [31:0] $end
    $var wire 32 M rf[25] [31:0] $end
    $var wire 32 N rf[26] [31:0] $end
    $var wire 32 O rf[27] [31:0] $end
    $var wire 32 P rf[28] [31:0] $end
    $var wire 32 Q rf[29] [31:0] $end
    $var wire 32 6 rf[2] [31:0] $end
    $var wire 32 R rf[30] [31:0] $end
    $var wire 32 S rf[31] [31:0] $end
    $var wire 32 7 rf[3] [31:0] $end
    $var wire 32 8 rf[4] [31:0] $end
    $var wire 32 9 rf[5] [31:0] $end
    $var wire 32 : rf[6] [31:0] $end
    $var wire 32 ; rf[7] [31:0] $end
    $var wire 32 < rf[8] [31:0] $end
    $var wire 32 = rf[9] [31:0] $end
    $var wire  5 ` waddr [4:0] $end
    $var wire 32 ( wdata [31:0] $end
    $var wire  1 Z wen $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
1#
0$
0%
b00000000000000000000000000000000 &
b00000000000000000000000000000000 '
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
0T
1U
b00000000000000000000000000000000 V
b00000000000000000000000000000000 W
b00000000000000000000000000000000 X
0Y
0Z
0[
b0000000 \
b000 ]
b00000 ^
b00000 _
b00000 `
b00000000000000000000000000000000 a
b00000000000000000000000000100000 b
b0000 c
0d
b00 e
b01 f
b10 g
b11 h
b00 i
b00 j
b00000000000000000000000000000101 k
#2
1T
b10000000000000000000000000000000 W
#3
0T
#4
1T
#5
0#
b00000000000000000000000000000001 (
b00000000000000000000000000000001 *
b00000000000000000000000000000001 /
b00000000000000000000000000000001 0
b00001 1
0T
0U
b00000000000100000000010100010011 V
1Z
b0010011 \
b00001 _
b01010 `
b00000000000000000000000000000001 a
#6
b00000000000000000000000000000001 >
1T
b10000000000000000000000000000100 W
#7
b10000000000000001001000000000100 (
b10000000000000000000000000000100 )
b00000000000000001001000000000000 *
b10000000000000000000000000000100 +
b10000000000000001001000000000100 /
b10000000000000001001000000000100 0
b00000 1
b10000000000000000000000000000100 2
b10000000000000000000000000000100 3
0T
b00000000000000001001000100010111 V
b0010111 \
b001 ]
b00001 ^
b00000 _
b00010 `
b00000000000000001001000000000000 a
#8
b10000000000000001001000000001000 (
b10000000000000000000000000001000 )
b10000000000000000000000000001000 +
b10000000000000001001000000001000 /
b10000000000000001001000000001000 0
b10000000000000000000000000001000 2
b10000000000000000000000000001000 3
b10000000000000001001000000000100 6
1T
b10000000000000000000000000001000 W
#9
b00000000000000000000000000000001 &
b00000000000000000000000000000010 (
b00000000000000000000000000000001 )
b00000000000000000000000000000001 *
b00000000000000000000000000000010 +
b00000000000000000000000000000001 ,
b00000000000000000000000000000001 .
b00000000000000000000000000000001 /
b00000000000000000000000000000000 0
b00001 1
b00000000000000000000000000000010 2
b00000000000000000000000000000000 3
0T
b00000000000101010000010100010011 V
b0010011 \
b000 ]
b01010 ^
b00001 _
b01010 `
b00000000000000000000000000000001 a
#10
b00000000000000000000000000000010 &
b00000000000000000000000000000011 (
b00000000000000000000000000000010 )
b00000000000000000000000000000100 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 .
b00000000000000000000000000000011 /
b00000000000000000000000000000011 0
b00000000000000000000000000000100 2
b00000000000000000000000000000001 3
b00000000000000000000000000000010 >
1T
b10000000000000000000000000001100 W
#11
0T
#12
b00000000000000000000000000000011 &
b00000000000000000000000000000100 (
b00000000000000000000000000000011 )
b00000000000000000000000000000110 +
b00000000000000000000000000000001 ,
b00000000000000000000000000000001 .
b00000000000000000000000000000010 0
b00000000000000000000000000000110 2
b00000000000000000000000000000011 >
1T
b10000000000000000000000000010000 W
#13
1#
b00000000000000000000000000000000 &
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000 1
b00000000000000000000000000000000 2
b00000000000000000000000000000000 3
0T
b00000000000100000000000001110011 V
1Y
0Z
b1110011 \
b00000 ^
b00000 `
#14
1T
b10000000000000000000000000010100 W
