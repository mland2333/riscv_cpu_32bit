$version Generated by VerilatedVcd $end
$timescale 1s $end

 $scope module TOP $end
  $var wire  1 V clk $end
  $var wire  1 \ exit $end
  $var wire 32 Y inst [31:0] $end
  $var wire 32 Z pc [31:0] $end
  $var wire  1 W rst $end
  $var wire 32 [ upc [31:0] $end
  $var wire  1 X valid $end
  $scope module top $end
   $var wire  1 ' CF $end
   $var wire 32 c DATA_WIDTH [31:0] $end
   $var wire  1 & OF $end
   $var wire  1 % ZF $end
   $var wire  1 V clk $end
   $var wire  1 \ exit $end
   $var wire  3 _ func [2:0] $end
   $var wire 32 $ imm [31:0] $end
   $var wire 32 Y inst [31:0] $end
   $var wire  1 ] jump $end
   $var wire  7 ^ op [6:0] $end
   $var wire 32 Z pc [31:0] $end
   $var wire  5 b rd [4:0] $end
   $var wire 32 * result [31:0] $end
   $var wire  5 ` rs1 [4:0] $end
   $var wire  5 a rs2 [4:0] $end
   $var wire  1 W rst $end
   $var wire 32 ( src1 [31:0] $end
   $var wire 32 ) src2 [31:0] $end
   $var wire 32 [ upc [31:0] $end
   $var wire  1 X valid $end
   $var wire  1 # wen $end
   $scope module mdecode $end
    $var wire  3 _ func [2:0] $end
    $var wire 32 $ i [31:0] $end
    $var wire 32 $ imm [31:0] $end
    $var wire 32 Y inst [31:0] $end
    $var wire  7 ^ op [6:0] $end
    $var wire  5 b rd [4:0] $end
    $var wire  5 ` rs1 [4:0] $end
    $var wire  5 a rs2 [4:0] $end
   $upscope $end
   $scope module mexecute $end
    $var wire  1 ' CF $end
    $var wire 32 c DATA_WIDTH [31:0] $end
    $var wire  1 & OF $end
    $var wire  1 % ZF $end
    $var wire 32 + a [31:0] $end
    $var wire  4 d alu_op [3:0] $end
    $var wire 32 , b [31:0] $end
    $var wire  3 _ func [2:0] $end
    $var wire 32 $ imm [31:0] $end
    $var wire  1 ] jump $end
    $var wire  7 ^ op [6:0] $end
    $var wire 32 Z pc [31:0] $end
    $var wire 32 * result [31:0] $end
    $var wire  1 e sign $end
    $var wire 32 ( src1 [31:0] $end
    $var wire 32 ) src2 [31:0] $end
    $var wire  1 e sub $end
    $var wire 32 [ upc [31:0] $end
    $var wire  1 # wen $end
    $scope module myalu $end
     $var wire  2 f ADDER [1:0] $end
     $var wire  1 ' CF $end
     $var wire  2 i CMP [1:0] $end
     $var wire  2 h LOGIC [1:0] $end
     $var wire  1 & OF $end
     $var wire  2 g SHIFT [1:0] $end
     $var wire  1 % ZF $end
     $var wire 32 + a [31:0] $end
     $var wire 32 * adder_result [31:0] $end
     $var wire  4 d alu_crl [3:0] $end
     $var wire 32 , b [31:0] $end
     $var wire  1 ' cmp $end
     $var wire 32 / cmp_result [31:0] $end
     $var wire 32 + l [31:0] $end
     $var wire  2 k logic_crl [1:0] $end
     $var wire 32 . logic_result [31:0] $end
     $var wire  2 f op_crl [1:0] $end
     $var wire 32 , r [31:0] $end
     $var wire 32 * result [31:0] $end
     $var wire  2 j shift_crl [1:0] $end
     $var wire 32 - shift_result [31:0] $end
     $var wire  1 e sign $end
     $var wire  1 e sub $end
     $scope module Adder $end
      $var wire 32 + a [31:0] $end
      $var wire 32 , b [31:0] $end
      $var wire  1 e cin $end
      $var wire  1 ' cout $end
      $var wire  1 & overflow $end
      $var wire 32 * result [31:0] $end
      $var wire  1 % zero $end
     $upscope $end
     $scope module Logic $end
      $var wire  2 f AND [1:0] $end
      $var wire  2 g OR [1:0] $end
      $var wire  2 h XOR [1:0] $end
      $var wire 32 + a [31:0] $end
      $var wire 32 0 and_result [31:0] $end
      $var wire 32 , b [31:0] $end
      $var wire  2 k logic_crl [1:0] $end
      $var wire 32 . logic_result [31:0] $end
      $var wire 32 1 or_result [31:0] $end
      $var wire 32 2 xor_result [31:0] $end
     $upscope $end
     $scope module Shift $end
      $var wire  2 f SLL [1:0] $end
      $var wire  2 g SRA [1:0] $end
      $var wire  2 h SRL [1:0] $end
      $var wire 32 + a [31:0] $end
      $var wire  2 j shift_crl [1:0] $end
      $var wire  5 3 shift_num [4:0] $end
      $var wire 32 - shift_result [31:0] $end
      $var wire 32 4 sll_result [31:0] $end
      $var wire 32 5 sra_result [31:0] $end
      $var wire 32 4 srl_result [31:0] $end
     $upscope $end
    $upscope $end
   $upscope $end
   $scope module mifetch $end
    $var wire 32 Y inst [31:0] $end
    $var wire 32 Z pc [31:0] $end
    $var wire  1 X valid $end
   $upscope $end
   $scope module mpc $end
    $var wire 32 c DATA_WIDTH [31:0] $end
    $var wire  1 V clk $end
    $var wire  1 ] jump $end
    $var wire 32 Z pc [31:0] $end
    $var wire  1 W rst $end
    $var wire 32 [ upc [31:0] $end
   $upscope $end
   $scope module mreg $end
    $var wire 32 l ADDR_WIDTH [31:0] $end
    $var wire 32 c DATA_WIDTH [31:0] $end
    $var wire  1 V clk $end
    $var wire  5 ` raddr1 [4:0] $end
    $var wire  5 a raddr2 [4:0] $end
    $var wire 32 ( rdata1 [31:0] $end
    $var wire 32 ) rdata2 [31:0] $end
    $var wire 32 6 rf[0] [31:0] $end
    $var wire 32 @ rf[10] [31:0] $end
    $var wire 32 A rf[11] [31:0] $end
    $var wire 32 B rf[12] [31:0] $end
    $var wire 32 C rf[13] [31:0] $end
    $var wire 32 D rf[14] [31:0] $end
    $var wire 32 E rf[15] [31:0] $end
    $var wire 32 F rf[16] [31:0] $end
    $var wire 32 G rf[17] [31:0] $end
    $var wire 32 H rf[18] [31:0] $end
    $var wire 32 I rf[19] [31:0] $end
    $var wire 32 7 rf[1] [31:0] $end
    $var wire 32 J rf[20] [31:0] $end
    $var wire 32 K rf[21] [31:0] $end
    $var wire 32 L rf[22] [31:0] $end
    $var wire 32 M rf[23] [31:0] $end
    $var wire 32 N rf[24] [31:0] $end
    $var wire 32 O rf[25] [31:0] $end
    $var wire 32 P rf[26] [31:0] $end
    $var wire 32 Q rf[27] [31:0] $end
    $var wire 32 R rf[28] [31:0] $end
    $var wire 32 S rf[29] [31:0] $end
    $var wire 32 8 rf[2] [31:0] $end
    $var wire 32 T rf[30] [31:0] $end
    $var wire 32 U rf[31] [31:0] $end
    $var wire 32 9 rf[3] [31:0] $end
    $var wire 32 : rf[4] [31:0] $end
    $var wire 32 ; rf[5] [31:0] $end
    $var wire 32 < rf[6] [31:0] $end
    $var wire 32 = rf[7] [31:0] $end
    $var wire 32 > rf[8] [31:0] $end
    $var wire 32 ? rf[9] [31:0] $end
    $var wire  5 b waddr [4:0] $end
    $var wire 32 * wdata [31:0] $end
    $var wire  1 # wen $end
   $upscope $end
  $upscope $end
 $upscope $end
$enddefinitions $end


#1
0#
b00000000000000000000000000000000 $
1%
0&
0'
b00000000000000000000000000000000 (
b00000000000000000000000000000000 )
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 /
b00000000000000000000000000000000 0
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000000 6
b00000000000000000000000000000000 7
b00000000000000000000000000000000 8
b00000000000000000000000000000000 9
b00000000000000000000000000000000 :
b00000000000000000000000000000000 ;
b00000000000000000000000000000000 <
b00000000000000000000000000000000 =
b00000000000000000000000000000000 >
b00000000000000000000000000000000 ?
b00000000000000000000000000000000 @
b00000000000000000000000000000000 A
b00000000000000000000000000000000 B
b00000000000000000000000000000000 C
b00000000000000000000000000000000 D
b00000000000000000000000000000000 E
b00000000000000000000000000000000 F
b00000000000000000000000000000000 G
b00000000000000000000000000000000 H
b00000000000000000000000000000000 I
b00000000000000000000000000000000 J
b00000000000000000000000000000000 K
b00000000000000000000000000000000 L
b00000000000000000000000000000000 M
b00000000000000000000000000000000 N
b00000000000000000000000000000000 O
b00000000000000000000000000000000 P
b00000000000000000000000000000000 Q
b00000000000000000000000000000000 R
b00000000000000000000000000000000 S
b00000000000000000000000000000000 T
b00000000000000000000000000000000 U
0V
1W
0X
b00000000000000000000000000000000 Y
b00000000000000000000000000000000 Z
b00000000000000000000000000000000 [
0\
0]
b0000000 ^
b000 _
b00000 `
b00000 a
b00000 b
b00000000000000000000000000100000 c
b0000 d
0e
b00 f
b01 g
b10 h
b11 i
b00 j
b00 k
b00000000000000000000000000000101 l
#2
1V
b10000000000000000000000000000000 Z
#3
0V
#4
1V
#5
1#
b00000000000000000000000000000001 $
0%
b00000000000000000000000000000001 *
b00000000000000000000000000000001 ,
b00000000000000000000000000000001 1
b00000000000000000000000000000001 2
b00001 3
0V
0W
1X
b00000000000100000000010100010011 Y
b0010011 ^
b00001 a
b01010 b
#6
b00000000000000001001000000000000 $
b10000000000000001001000000000100 *
b10000000000000000000000000000100 +
b00000000000000001001000000000000 ,
b10000000000000000000000000000100 -
b10000000000000001001000000000100 1
b10000000000000001001000000000100 2
b00000 3
b10000000000000000000000000000100 4
b10000000000000000000000000000100 5
b00000000000000000000000000000001 @
1V
b00000000000000001001000100010111 Y
b10000000000000000000000000000100 Z
b0010111 ^
b001 _
b00001 `
b00000 a
b00010 b
#7
0V
#8
b00000000000000000000000000000001 $
b00000000000000000000000000000001 (
b00000000000000000000000000000010 *
b00000000000000000000000000000001 +
b00000000000000000000000000000001 ,
b00000000000000000000000000000010 -
b00000000000000000000000000000001 .
b00000000000000000000000000000001 0
b00000000000000000000000000000001 1
b00000000000000000000000000000000 2
b00001 3
b00000000000000000000000000000010 4
b00000000000000000000000000000000 5
b10000000000000001001000000000100 8
1V
b00000000000101010000010100010011 Y
b10000000000000000000000000001000 Z
b0010011 ^
b000 _
b01010 `
b00001 a
b01010 b
#9
0V
#10
b00000000000000000000000000000010 (
b00000000000000000000000000000011 *
b00000000000000000000000000000010 +
b00000000000000000000000000000100 -
b00000000000000000000000000000000 .
b00000000000000000000000000000000 0
b00000000000000000000000000000011 1
b00000000000000000000000000000011 2
b00000000000000000000000000000100 4
b00000000000000000000000000000001 5
b00000000000000000000000000000010 @
1V
b10000000000000000000000000001100 Z
#11
0V
#12
0#
1%
b00000000000000000000000000000000 (
b00000000000000000000000000000000 *
b00000000000000000000000000000000 +
b00000000000000000000000000000000 ,
b00000000000000000000000000000000 -
b00000000000000000000000000000000 1
b00000000000000000000000000000000 2
b00000 3
b00000000000000000000000000000000 4
b00000000000000000000000000000000 5
b00000000000000000000000000000011 @
1V
b00000000000100000000000001110011 Y
b10000000000000000000000000010000 Z
b1110011 ^
b00000 `
b00000 b
#13
0V
#14
b00000000000000000000000000000000 $
1V
b00000000000000000000000000000000 Y
b10000000000000000000000000010100 Z
1\
b0000000 ^
b00000 a
